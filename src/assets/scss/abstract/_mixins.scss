@use 'sass:map';

@mixin respond-to($breakpoint) {
  @media (min-width: $breakpoint) {
    @content;
  }
}

@mixin xl-size() {
  @include respond-to($screen-xl-min) {
    @content;
  }
}

@mixin lg-size() {
  @include respond-to($screen-lg-min) {
    @content;
  }
}

@mixin md-size() {
  @include respond-to($screen-md-min) {
    @content;
  }
}

@mixin sm-size() {
  @include respond-to($screen-sm-min) {
    @content;
  }
}

@mixin xs-size() {
  @include respond-to($screen-xs-min) {
    @content;
  }
}

//  * Generate a responsive css variable
//  *
//  * @param {SASS Map} must be a sass map containing keys of sm, md, lg, xl
//  * @param {text} the css variable, --css-var
//  * @param {any} optional, the default value, will set value for xs devices
//  */
@mixin make-responsive-var($var-to-update, $map, $starting-val: null) {
  @if ($starting-val) {
    #{$var-to-update}: $starting-val;
  }

  @each $key, $bp in $breakpoints {
    // Get header mods by key of breakpoints
    $val: map.get($map, $key);

    @include respond-to($bp) {
      #{$var-to-update}: #{$val};
    }
  }
}

//  * Generate a css class with responsive classes
//  *
//  * @param {SASS Map} must be a sass map containing only values
//  * @param {text} the name of the class to output
//  * @param {text} the css property to effect
//  */
@mixin class-with-responsive-val-only($map, $class, $property) {
  @each $val in $map {
    .#{$class}-#{$val} {
      #{$property}: $val;
    }
    @each $bp, $px in $breakpoints {
      @include respond-to(#{$px}) {
        .#{$class}-#{$bp}-#{$val} {
          #{$property}: $val !important;
        }
      }
    }
  }
}

//  * Generate a css class with responsive classes using key and value from map
//  *
//  * @param {SASS Map} must be a sass map containing key value pairs
//  * @param {text} the css property to effect
//  */
@mixin class-with-responsive-key-and-val(
  $map,
  $class,
  $property,
  $calc-value: null,
  $var-name: null
) {
  @each $key, $val in $map {
    .#{$class}-#{$key} {
      @if $calc-value and $var-name {
        #{$property}: calc($val - var($var-name));
      } @else {
        #{$property}: $val;
      }
    }
    @each $bp, $px in $breakpoints {
      @include respond-to(#{$px}) {
        .#{$class}-#{$bp}-#{$key} {
          #{$property}: $val !important;
        }
      }
    }
  }
}
