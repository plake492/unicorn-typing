@mixin generate-color-var($key, $value) {
  --bg-#{'' + $key}: #{$value};

  @each $tone in $tones {
    --bg-#{'' + $key}-#{$tone}: #{get-color-scale-value($value, $tone)};
  }
}

@mixin bg-classes() {
  background: var(--bg-color);
  color: var(--text-color);
  transition: color 200ms ease-in-out, background 200ms ease-in-out;
}

// ************************************************* //
// ************ Generate Color Bg Map  ************* //

// ************ Generate Root color vars ************ //
/* Set default root colors*/
:root {
  --bg-color: #{$bg-primary};
  --text-color: #{$text-main};
}

@each $key, $value in $target-colors {
  $text-color: get-contrasted-text($value);

  .bg-#{'' + $key} {
    /* Update Root colors, setting colors in child elements */
    --bg-color: #{$value};
    --text-color: #{$text-color};

    @include bg-classes();
  }

  // * Add tones as classes * //
  @each $tone in $tones {
    $bg-color-tone: get-color-scale-value($value, $tone);
    $text-color-tone: get-contrasted-text($bg-color-tone);

    .bg-#{'' + $key}-#{$tone} {
      /* Update Root colors, setting colors in child elements */
      --bg-color: #{$bg-color-tone};
      --text-color: #{$text-color-tone};

      @include bg-classes();
    }
  }
}
// ************************************************************************ //
// ***************** Generator complemenrty Color Schemes ***************** //
$bg-comp-outputs: ('bg-1', 'bg-2');
$bg-comp-primary: 100;
$bg-comp-length-calc: length($bg-comp-outputs);

@each $class in $bg-comp-outputs {
  $i: index($bg-comp-outputs, $class);
  $h-value: calc(if($bg-comp-primary==0, 360, $bg-comp-primary) / ($i));
  $hsl: hsl($h-value, 100%, 50%);
  $text-color: get-contrasted-text($hsl);

  .comp-#{$class} {
    /* Update Root colors, setting colors in child elements */
    --bg-color: #{$hsl};
    --text-color: #{$text-color};
    @include bg-classes();
  }
}

:root {
  @each $key, $value in $target-colors {
    @include generate-color-var($key, $value);
  }

  @each $class in $bg-comp-outputs {
    $i: index($bg-comp-outputs, $class);
    $h-value: calc(if($bg-comp-primary==0, 360, $bg-comp-primary) / ($i));
    $hsl: hsl($h-value, 100%, 50%);

    --comp-#{$class}: #{$hsl};
  }
}
